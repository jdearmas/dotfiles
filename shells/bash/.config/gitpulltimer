#!/bin/sh

# update configuration
~/Documents/git/dotfiles/setup.sh 2
# 2 means pull once .bashrc is sourced
# 1 means pull every time .bashrc is sourced
# 0 mean do nothing


# Git Repo Dotfiles Pull Timer
    # This section of code creates a
    # timer. When 'WAIT_TIME' has
    # elapsed, the next time .bashrc is
    # sourced, it will pull from the
    # origin repo.

    # For example, if WAIT_TIME is 3.
    # The timer is set for 3 seconds. If
    # you were to source the file again,
    # within the 3 seconds, it will
    # source as normal.  But if you were
    # to source .bashrc after 3 seconds,
    # .bashrc will pull from
    # the server git repo that houses
    # your dotfiles

TMP_TIMER_LOG="/tmp/gitbashdottimer.log"
WAIT_TIME=100
NOW=$(date +%s)

function create_timer(){
    TMP_TIMER_LOG=$1
    if [ ! -f $TMP_TIMER_LOG ]; then
            touch $TMP_TIMER_LOG;
    fi ;}

function start_timer(){
    WAIT_TIME=$1
    NOW=$(date +%s)
    UPDATE_TIME=$(cat $TMP_TIMER_LOG 2> /dev/null)
    if [ "$NOW" -gt "$UPDATE_TIME" ] 2> /dev/null; then
        assess_time
    else
            declare_time_left
    fi
    if [ -z "$UPDATE_TIME" ]; then
        let "UPDATE_TIME=NOW+WAIT_TIME"
        echo $UPDATE_TIME > $TMP_TIMER_LOG
        echo "Pull Countdown Initiated..."
    fi ;}

function clear_timer(){
    TMP_TIMER_LOG="/tmp/gitbashdottimer.log"
    rm $TMP_TIMER_LOG; touch $TMP_TIMER_LOG
    UPDATE_TIME='' ;}

function declare_time_left(){
    UPDATE_TIME=$(cat $TMP_TIMER_LOG 2> /dev/null)
    NOW=$(date +%s)
    let "TIME_LEFT=UPDATE_TIME-NOW"
    echo "A pull to the server dotfiles will occur in: $TIME_LEFT secs..." ;}

function pull_from_origin(){
    ~/Documents/git/dotfiles/setup.sh 2 2> /dev/null ;}
    #echo "fake pull" ;}

function assess_time(){
    UPDATE_TIME=$(cat $TMP_TIMER_LOG 2> /dev/null)
    NOW=$(date +%s)
    if [ "$NOW" -gt "$UPDATE_TIME" ];
    then
        clear_timer
        pull_from_origin
    fi ;}

create_timer "$TMP_TIMER_LOG"
start_timer "$WAIT_TIME"
